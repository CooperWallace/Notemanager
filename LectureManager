#!/bin/bash
#
# Maintains a list of Courses that are currently active on the system. Allowing
# for the user to easily access information and file path to the specified
# Course
#
# Written by: Cooper Wallace

###############################################################################
# This Script will be responsible for managing and maintaining the path of each
# Course that has been added to its database. It will allow the user to browse the
# Courses that currently exist in the database, browse the Lectures in a Course,
# and finally give the path to a Lecture in a specific Course.
#
# This script should have the following capabilities:
#
# 1. Ability to Add Courses to the Database
# 	- Active for adding new lecture
# 	- Directory for searching
# 2. Browse the Courses in the Database
# 	- Obtain the path of a specific course
# 3. Browse Lectures that belong to a specific course
# 4. Obtain the Path to either
# 	- A Specified Lecture
# 	- The Path to a new Lecture file. Lecture(X+1).md
###############################################################################

# Display the Usage Documentation message
usage() {
	echo "Usage: $0 [-aglh] [-c course]"
	echo "	-a	Add a Course"
	echo "	-l	List Courses"
	echo "	-g	Get Course Directory"
}

# Set the Configuration File of the Program, or create one if it doesnt exist.
# Globals:
#	CONFIG_PATH	- Contains the path to the config file
#	CONFIG_FILE	- Contains the contents of the Config file
init_config() {
	CONFIG_PATH="test.json"

	if [[ -e "$CONFIG_PATH" ]]; then
		CONFIG_FILE=$(< "$CONFIG_PATH")
	else
		echo "Generating new config"
		CONFIG_FILE=""
	fi

	# Setup basic JSON for empty file
	if [[ $CONFIG_FILE == "" ]]; then
		echo "Config empty, Generating new"
		echo "{\"Courses\":{}}" > $CONFIG_PATH
	fi
}

################################################################################

# Handler for Interactively adding a new Course into the Database
handle_add_course() {
	local COURSE_NAME=""
	local DIRECTORY_PATH=""

	while [[ $COURSE_NAME == "" ]]; do
		printf "Course Name: "
		read COURSE_NAME
	done

	exists_course "$COURSE_NAME"

	if [[ $? ]]; then
		echo "A Course by that name already exists."
		exit 1
	fi

	while [[ $DIRECTORY_PATH == "" ]]; do
		printf "Path: "
		read DIRECTORY_PATH
	done

	if [ ! -d "$DIRECTORY_PATH" ]; then
		printf "Path does not exist.\n%s\n" "$DIRECTORY_PATH"
		exit
	fi

	printf "Confirmation\nCourse: %s\nDirectory: %s\nCreate Course? (Yy)\n" \
		"$COURSE_NAME" \
		"$DIRECTORY_PATH"
	read resp

	if [[ ! "${resp,,}" == "y" ]]; then
		printf "Aborting"
		exit
	fi

	add_course_to_db "$COURSE_NAME" "$DIRECTORY_PATH"
}

# Add Course to Data Structure
# Args:
#	1 Course Name
#	Directry
add_course_to_db() {
	local COURSE_NAME="$1"
	local DIRECTORY_PATH="$2"

	# Query to Add Course
	QUERY=$(printf "jq '.Courses += {\"%s\": {\"dir\": \"%s\"}}' test.json" \
		"$COURSE_NAME" \
		"$DIRECTORY_PATH")
 	DB=$(eval $QUERY)

	# DAtabase Connection
	cp "$CONFIG_PATH" "${CONFIG_PATH}.bak"
 	echo $DB > "$CONFIG_PATH"
}

# Display the Courses that currently exist in the Database
get_courses () {
	readarray -t CourseNames < <(echo $CONFIG_FILE | jq -r ".Courses | keys[]")

	if (( ${#CourseNames[@]} == 0 )); then
		echo "No Courses currently exist in the database."
		echo "You may add one by using -a option"
		exit
	fi

	printf "%s\n" "${CourseNames[@]}"
}

# Display the list of Courses that exist and their path
show_course_directory () {
	readarray -t arr < <(echo $CONFIG_FILE | jq -r ".Courses | keys[]" )

	for course in "${arr[@]}"; do
		echo $course
		DIR=$( jq -r ".Courses.$course" <<< $CONFIG_FILE )
		echo "Directory $DIR"
	done

	unset arr
}

# Return the Directory that corresponds to the specified Course, if it exists
# Exits on failure, returning 1
# Argument:
#	Course - Name of Course to search
# Returns:
#	DIRECTORY - Path to the specified course
get_course_directory () {
	COURSE="$1"
	if [[ -z $COURSE ]] || [[ "$COURSE" == "" ]]; then
		echo "No Course specified"
		exit 1
	fi

	DIRECTORY=$(jq -r --arg v "$COURSE" '.Courses[$v].dir' <<< $CONFIG_FILE)

	if [[ $DIRECTORY == "null" ]]; then
		exit 1
	else
		echo $DIRECTORY
	fi

	unset $COURSE
}

# Outputs a list of Lectures that belongs to the specified Course if it exists
# Arguments: Course Name
#
get_course_lectures () {
	COURSE="$1"
	getCourseDirectory "$COURSE"

	ls "$DIRECTORY" | grep "Lecture" | sort --version-sort
}

# Determines if a Course with the specified name currently exists in the
# database
#	Arguments: Course name
#	Returns: 0 if course exists, otherwise 1
exists_course () {
	local COURSE_NAME="$1"

	local QUERY=$(printf "jq -e '.[] | select( .| has(\"%s\"))'" $COURSE_NAME)

	local EXISTS
	EXISTS=$(eval $QUERY <<< $CONFIG_FILE)

	if [[ $? == 0 ]]; then
		return 0
	fi

	return 1
}

# Get all subkeys
# TEST=$(cat test.json | jq -r ".Courses | keys[]")

# Read a JSON Array file into an Bash Array
# readarray -t lectureDirectories < <(cat test.json | jq -r ".lecdir[]" )
#
# for t in  "${lectureDirectories[@]}"; do
# 	echo $t
# done

#echo $TEST
#readarray -t arr <<< $TEST
#
#printf "%s\n" "${arr[@]}"

################################################################################

# Initialize Configuration file containing Database
init_config

while getopts ":lahg:c:e:" o; do
	case "${o}" in
		l)
			get_courses
			;;
		h)
			usage
			;;
		a)
			handle_add_course
			;;
		e)
			courseName=${OPTARG}
			exists_course $courseName
			echo $?
			;;
		g)
			courseName=${OPTARG}
			get_course_directory "$courseName"
			;;
		c)
			courseName=${OPTARG}
			get_course_lectures "$courseName"
			;;
		*)
			usage
			;;
	esac
done

shift $((OPTIND-1))


#!/usr/bin/env bash
#
# Maintains a list of Courses that are currently active on the system. Allowing
# for the user to easily access information and file path to the specified
# Course
#
# Written by: Cooper Wallace

###############################################################################
# This Script will be responsible for managing and maintaining the path of each
# Course that has been added to its database. It will allow the user to browse the
# Courses that currently exist in the database, browse the Lectures in a Course,
# and finally give the path to a Lecture in a specific Course.
#
# This script should have the following capabilities:
#
# 1. Ability to Add Courses to the Database
# 	- Active for adding new lecture
# 	- Directory for searching
# 2. Browse the Courses in the Database
# 	- Obtain the path of a specific course
# 3. Browse Lectures that belong to a specific course
# 4. Obtain the Path to either
# 	- A Specified Lecture
# 	- The Path to a new Lecture file. Lecture(X+1).md
###############################################################################

# Display the Usage Documentation message
usage() {
	echo -n "Usage: $0 [OPTIONS] Course

Help maintain and manage Notes for the specified courses on the Users system.

 Options:
  -h	Display usage message
  -l	List Courses
  -L	List Courses with more information
  -s Course 	List Notes for the specified course
  -c Course 	Create a new Lecture in the course
  -g Course 	Get Course Directory
"
}
################################################################################

# Outputs a list of Lectures that belongs to the specified Course if it exists
# Arguments:
#	Course name
get_course_lectures () {
	local COURSE="$1"

	course_exists "$COURSE"

	if [[ $? != 0 ]]; then
		printf "The course, %s, doesn't exist in the database." \
			"$COURSE"
		exit 1
	fi

	get_course_directory "$COURSE"

	# Verify Lecture subdirectory exists
	DIRECTORY="$DIRECTORY""Lecture/"
	if [[ ! -e $DIRECTORY ]]; then
		echo "Sub directory 'Lecture' doesnt exist for this course."
		echo "Please create it."
		exit 1
	fi

	# List Lectures contained in the Course
	ls "$DIRECTORY" | grep "Lecture" | sort --version-sort
}

# Create a new Lecture file, and return the path
# Arguments:
#	Course Name
create_course_lecture () {
	local COURSE_NAME="$1"

	# Obtain the number of Lectures that currently exist
	local LECTURE_NUM=$(get_course_lectures "$COURSE_NAME" | wc -l )

	if [[ $LECTURE_NUM -eq 0 ]]; then
		echo "Lecture1.md"
	fi

	# Next Lecture name will be LECTURE_NUM+1
	printf "Lecture%d.md\n" $((LECTURE_NUM+1))
}


################################################################################

# Loading Library for shared functions contained in 'notemgr-lib'
SCRIPT_PATH="$( cd "$(dirname "$0")" ; pwd -P )"
LIB_PATH="${SCRIPT_PATH}/notemgr-lib"

if [[ -f "${LIB_PATH}" ]]; then
	source "${LIB_PATH}"
else
	echo "Couldn't find the notemgr library file."
	echo "Please find it and add it to the same folder as this script."
	echo "Exitting..."
	exit 1
fi

# Initialize Configuration file containing Database
init_db

while getopts "hlLs:c:g:" o; do
	case "${o}" in
		l)
			get_courses
			;;
		g)
			get_course_directory "${OPTARG}"
			echo "$DIRECTORY"
			;;
		s)
			get_course_lectures "${OPTARG}"
			;;
		c)
			create_course_lecture "${OPTARG}"
			;;
		* | h)
			usage
			exit
			;;
	esac
done

shift $((OPTIND-1))

# Default option when no arguments are specified
if [[ $OPTIND -eq 1 ]] && [[ $# == 0 ]]; then
	usage
	exit
fi


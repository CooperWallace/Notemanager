#!/usr/bin/env bash
#
# Maintains a list of Courses that are currently active on the system. Allowing
# for the user to easily access information and file path to the specified
# Course
#
# Written by: Cooper Wallace

###############################################################################
# This Script will be responsible for managing and maintaining the path of each
# Course that has been added to its database. It will allow the user to browse the
# Courses that currently exist in the database, browse the Lectures in a Course,
# and finally give the path to a Lecture in a specific Course.
#
# This script should have the following capabilities:
#
# 1. Ability to Add Courses to the Database
# 	- Active for adding new lecture
# 	- Directory for searching
# 2. Browse the Courses in the Database
# 	- Obtain the path of a specific course
# 3. Browse Lectures that belong to a specific course
# 4. Obtain the Path to either
# 	- A Specified Lecture
# 	- The Path to a new Lecture file. Lecture(X+1).md
###############################################################################

# Display the Usage Documentation message
usage() {
	echo -n "Usage: $0 [OPTIONS]
$0		Display all non-archived courses
$0 [Course]		Display all Lectures in course
$0 [Course] [Lecture]	Print path to the specific lecture

Help maintain and manage Notes for the specified courses on the Users system.

 Options:
  -h	Display usage message
  -l	List all Courses in database, including those archived.
  -c Course 	Create a new Lecture in the course
  -g Course 	Get Course Directory
  -a Course		Display whether course has been archived
"
}
################################################################################

# Outputs a list of Lectures that belongs to the specified Course if it exists
# Arguments:
#	Course name
handle_display_lectures () {
	local COURSE_NAME="$1"

	if ! course_exists "$COURSE_NAME"; then
		echo "The course $COURSE_NAME doesn't exist in the database."
		exit 1
	fi

	get_course_directory "$COURSE_NAME"

	# Verify Lecture subdirectory exists
	DIRECTORY="$DIRECTORY""Lecture/"
	if [[ ! -e $DIRECTORY ]]; then
		echo "Sub directory 'Lecture' doesnt exist for this course."
		echo "Please create it."
		exit 1
	fi

	# List Lectures contained in the Course
	ls "$DIRECTORY" | grep "Lecture" | sort --version-sort
}

# Determine the file name of the new Lecture in the specified course
# Arguments:
#	Course Name
handle_create_lecture () {
	local COURSE_NAME="$1"

	if ! course_exists "$COURSE_NAME"; then
		echo "The course $COURSE_NAME doesn't exist in the database."
		echo "Cannot create Lecture for a non-existant course"
		exit 1
	fi

	if is_course_archived "$COURSE_NAME"; then
		echo -n "The course $COURSE_NAME has been archived."
		echo " New lectures cannot be added to it."
		exit 2
	fi

	# Obtain the number of Lectures that currently exist
	local LECTURE_NUM=$(handle_display_lectures "$COURSE_NAME" | wc -l )

	get_course_directory "$COURSE_NAME"

	# Next Lecture name will be LECTURE_NUM+1
	printf "%sLecture/Lecture%d.md\n" "$DIRECTORY" $((LECTURE_NUM+1))
}

# Return the path to the Lecture in a course if they both exist
# Arguments
# $1 Course
# $2 Lecture Name
handle_display_lecture_path() {
	local COURSE_NAME="$1"
	local LECTURE_NAME="$2"

	if course_exists; then
		echo "Error: Course doesn't exist"
		exit
	fi

	if lecture_exists; then
		echo "Error: Lecture $2 doesn't belong to $1"
		exit
	fi

	get_course_directory "$COURSE_NAME"

	printf "%sLecture/%s" "$DIRECTORY" "$2"
}

# Determine if the Course has been archived.
# Exit 1 if Non-existant or Archived
handle_display_archived () {
	local COURSE_NAME="$1"

	if ! course_exists "$COURSE_NAME"; then
		echo "The course $COURSE_NAME doesn't exist in the database."
		exit 1
	fi

	if is_course_archived "$COURSE_NAME"; then
		echo -n "The course $COURSE_NAME has been archived."
		exit 1
	fi

	exit 0
}


################################################################################

# Loading Library for shared functions contained in 'notemgr-lib'
SCRIPT_PATH="$( cd "$(dirname "$0")" ; pwd -P )"
LIB_PATH="${SCRIPT_PATH}/notemgr-lib"

if [[ -f "${LIB_PATH}" ]]; then
	source "${LIB_PATH}"
else
	echo "Couldn't find the notemgr library file."
	echo "Please find it and add it to the same folder as this script."
	echo "Exitting..."
	exit 1
fi

# Initialize Configuration file containing Database
init_db

while getopts "hlc:g:a:" o; do
	case "${o}" in
		g)
			get_course_directory "${OPTARG}"
			echo "$DIRECTORY"
			exit
			;;
		c)
			handle_create_lecture "${OPTARG}"
			exit
			;;
		a)
			handle_display_archived "${OPTARG}"
			exit
			;;
		l)
			get_all_courses
			exit
			;;
		* | h)
			usage
			exit
			;;
	esac
done

shift $((OPTIND-1))

## Handle non-specific argument options
# 0 Args 	display courses
# 1 Args	Display Lectures for Course
# 2 Args	Display path to specified Lecture


if [[ $# == 0 ]]; then
	get_active_courses
# Otherwise Handle Course only when 1 argument
elif [[ $# == 1 ]]; then
	handle_display_lectures "$1"
elif [[	$# == 2 ]]; then
	handle_display_lecture_path "$1" "$2"
else
	usage
fi

#!/usr/bin/env bash
#
# Library functions to be used for notemgr and its sub-commands

################################################################################
# Database functions
# 	Functions dedicated to directly interacting with the Course Database

# Set the Database file for the Program, or create one if it doesnt exist.
#	The Database shall contain all information regarding courses
# Globals:
#	DB_PATH	- READONLY Contains the path to the config file
#	DB_FILE	- READONLY Contains the contents of the Config file
init_db() {
	readonly DB_PATH="test.json"

	if [[ -e "$DB_PATH" ]]; then
		DB_FILE=$(< "$DB_PATH")
	else
		echo "Generating new config"
		DB_FILE=""
	fi

	# Setup basic JSON for empty file
	if [[ $DB_FILE == "" ]]; then
		echo "Config empty, Generating new"
		( echo "{\"Courses\":{}}" | jq ".") > $DB_PATH
		readonly DB_FILE=$(< "$DB_PATH")
	fi
}

# Determines if a Course with the specified name currently exists in the
# database
# Arguments:
#		Course name
# Returns:
#		0 if the Course exists, otherwise non-zero
course_exists () {
	local COURSE_NAME="$1"
	local QUERY=$(printf "jq -e '.[] | select( .| has(\"%s\"))'" $COURSE_NAME)

	( eval $QUERY <<< $DB_FILE > /dev/null )
	return $?
}

# Add Course to Data Structure
# Arguments:
#	Course Name
#	Directry
add_course_to_db() {
	local COURSE_NAME="$1"
	local DIRECTORY_PATH="$2"

	# Database query to Add Course
	QUERY=$(printf \
		"jq '.Courses += {\"%s\": {\"dir\": \"%s\"}}' %s" \
		"$COURSE_NAME" \
		"$DIRECTORY_PATH" \
		"$DB_PATH" \
	)

	echo "$(eval $QUERY)" > "$DB_PATH"
}

# Return the Directory that corresponds to the specified Course, if it exists
#
# GLOBAL:
#	DIRECTORY - Path to the specified course
# Arguments:
#	Course - Name of Course to search
# Returns:
#	0 on success, otherwise non-zero
get_course_directory () {
	local COURSE_NAME="$1"

	# Determine if a course was specified
	if [[ -z $COURSE_NAME ]] || [[ "$COURSE_NAME" == "" ]]; then
		echo "get_course_directory: No Course specified"
		exit 1
	fi

	DIRECTORY=$(jq -r --arg v "$COURSE_NAME" '.Courses[$v].dir' <<< $DB_FILE)

	if [[ $DIRECTORY == "null" ]]; then
		return 1
	fi

	# Add / if DIRECTORY doesnt end in one
	[[ "${DIRECTORY}" != */ ]] && DIRECTORY="$DIRECTORY/"
}

# Display all of the Active Courses in the database.
get_active_courses () {
	QUERY=`jq -r '.Courses | keys[] as $k |
		select((.[$k].archived == "false") or (.[$k].archived==null)) |
		$k' <<<$DB_FILE
		`

	if [[ $? != 0 ]]; then
		echo "There was an error obtaining the active courses."
		exit 1
	fi

	if [[ -z "$QUERY" || "$QUERY" == "" ]]; then
		echo "There are currently no active courses in the database."
		echo "Please add a new course or set a existing course to be active."
		exit 1
	fi

	echo "$QUERY"
}

# Display the Courses that currently exist in the Database
get_all_courses () {
	readarray -t CourseNames < <(echo $DB_FILE | jq -r ".Courses | keys[]")

	if (( ${#CourseNames[@]} == 0 )); then
		echo "No Courses currently exist in the database."
		echo "You may add one by using -a option"
		exit
	fi

	printf "%s\n" "${CourseNames[@]}"
	unset CourseNames
}

# Set the specified course as being considered Archived. Assumes that the
# provided course already exists.
# Arguments:
#	Course name
set_course_archived () {
	local COURSE_NAME="$1"
	if is_course_archived "$COURSE_NAME"; then
		printf "Course, %s, is already archived.\n" "$COURSE_NAME"
		return 1
	fi

	QUERY=`jq -r --arg v "$COURSE_NAME" '.Courses[$v].archived = "true"' <<< $DB_FILE`
	echo $QUERY > "$DB_PATH"

	printf "Course, %s, successfully archived.\n" "$COURSE_NAME"
}

# Set the specified course to being Active if it was archived.
# Arguments:
#	Course name
set_course_active () {
	local COURSE_NAME="$1"
	if ! is_course_archived "$COURSE_NAME"; then
		printf "Course, %s, is already active.\n" "$COURSE_NAME"
		return 1
	fi

	QUERY=`jq -r --arg v "$COURSE_NAME" '.Courses[$v].archived = "false"' <<< $DB_FILE`
	echo $QUERY > "$DB_PATH"

	printf "Course, %s, successfully set to active.\n" "$COURSE_NAME"
}

# Determine whether the specified course has been archived. The course is
# assumed to not be archived unless specified. Assumes the course exists
# in the database.
# Arguments:
#	Course Name
# Returns:
#	0 when Archived, otherwise none
is_course_archived () {
	local COURSE_NAME="$1"

	QUERY=`jq -r --arg v "$COURSE_NAME" '.Courses[$v].archived' <<< $DB_FILE`

	[[ "$QUERY" == "true" ]] && return 0 || return 1
}

################################################################################
# Helper functions

# Checks if the first argument, a list, contains the second argument inside of
# it.
# $1 List to check
# $2 Item to find
contains () {
	if [[ "$1" =~ (^|[[:space:]])"$2"($|[[:space:]]) ]]; then
		return 0
	fi
	return 1
}

# Determine if the Lecture belongs to the Course
# Arguments
# $1 Course to check
# $2 Lecture
# Returns:
# 0 if Lecture is found, otherwise non-zero
lecture_exists () {
	local COURSE_NAME="$1"
	local LECTURE_NAME="$2"
	local LECTURE_NUM=(handle_display_lectures "$COURSE_NAME")

	`contains "$1" "$2"` && return 1 || return 0
}


